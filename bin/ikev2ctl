#!/bin/bash
rpath="$(readlink ${BASH_SOURCE})"
if [ -z "$rpath" ];then
    rpath=${BASH_SOURCE}
fi
pwd=${PWD}
this="$(cd $(dirname $rpath) && pwd)"
# cd "$this"
export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

user="${SUDO_USER:-$(whoami)}"
home="$(eval echo ~$user)"

# export TERM=xterm-256color

# Use colors, but only if connected to a terminal, and that terminal
# supports them.
if which tput >/dev/null 2>&1; then
  ncolors=$(tput colors 2>/dev/null)
fi
if [ -t 1 ] && [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
    RED="$(tput setaf 1)"
    GREEN="$(tput setaf 2)"
    YELLOW="$(tput setaf 3)"
    BLUE="$(tput setaf 4)"
            CYAN="$(tput setaf 5)"
    BOLD="$(tput bold)"
    NORMAL="$(tput sgr0)"
else
    RED=""
    GREEN=""
    YELLOW=""
            CYAN=""
    BLUE=""
    BOLD=""
    NORMAL=""
fi
_err(){
    echo "$*" >&2
}

_runAsRoot(){
    cmd="${*}"
    local rootID=0
    if [ "${EUID}" -ne "${rootID}" ];then
        echo -n "Not root, try to run as root.."
        # or sudo sh -c ${cmd} ?
        if eval "sudo ${cmd}";then
            echo "ok"
            return 0
        else
            echo "failed"
            return 1
        fi
    else
        # or sh -c ${cmd} ?
        eval "${cmd}"
    fi
}

rootID=0
function _root(){
    if [ ${EUID} -ne ${rootID} ];then
        echo "Need run as root!"
        exit 1
    fi
}

ed=vi
if command -v vim >/dev/null 2>&1;then
    ed=vim
fi
if command -v nvim >/dev/null 2>&1;then
    ed=nvim
fi
if [ -n "${editor}" ];then
    ed=${editor}
fi
###############################################################################
# write your code below (just define function[s])
# function is hidden when begin with '_'
###############################################################################
# TODO
subnet="10.8.0.0/16"
start(){
    _runAsRoot "systemctl start ikev2.service"
}

stop(){
    _runAsRoot "systemctl stop ikev2.service"
}

restart(){
    stop
    start
}

_start_pre(){
    local dev="$(ip route s | grep default | perl -lne 'print $1 if /dev (\w+)/')"
    echo "dev ${dev}"

    _runAsRoot "iptables -A FORWARD --match policy --pol ipsec --dir in --proto esp -s ${subnet} -j ACCEPT"
    _runAsRoot "iptables -A FORWARD --match policy --pol ipsec --dir out --proto esp -s ${subnet} -j ACCEPT"

    _runAsRoot "iptables -t nat -A POSTROUTING -s ${subnet} -o ${dev} -m policy --dir out --pol ipsec -j ACCEPT"
    _runAsRoot "iptables -t nat -A POSTROUTING -s ${subnet} -o ${dev} -j MASQUERADE"

    _runAsRoot "iptables -t mangle -A FORWARD --match policy --pol ipsec --dir in -s ${subnet} -o ${dev} -p tcp -m tcp --tcp-flags SYN,RST SYN -m tcpmss --mss 1361:1536 -j TCPMSS --set-mss 1360"

    _runAsRoot "sysctl net.ipv4.ip_forward=1"
    _runAsRoot "sysctl net.ipv4.conf.all.accept_redirects=0"
    _runAsRoot "sysctl net.ipv4.conf.all.send_redirects=0"
    _runAsRoot "sysctl net.ipv4.ip_no_pmtu_disc=1"
}

_stop_post(){
    local dev="$(ip route s | grep default | perl -lne 'print $1 if /dev (\w+)/')"
    _runAsRoot "iptables -D FORWARD --match policy --pol ipsec --dir in --proto esp -s ${subnet} -j ACCEPT"
    _runAsRoot "iptables -D FORWARD --match policy --pol ipsec --dir out --proto esp -s ${subnet} -j ACCEPT"

    _runAsRoot "iptables -t nat -D POSTROUTING -s ${subnet} -o ${dev} -m policy --dir out --pol ipsec -j ACCEPT"
    _runAsRoot "iptables -t nat -D POSTROUTING -o ${dev} -s ${subnet} -j MASQUERADE"

    _runAsRoot "iptables -t mangle -D FORWARD --match policy --pol ipsec --dir in -s ${subnet} -o ${dev} -p tcp -m tcp --tcp-flags SYN,RST SYN -m tcpmss --mss 1361:1536 -j TCPMSS --set-mss 1360"
}

config(){
    $ed /etc/{ipsec.conf,ipsec.secrets}
    restart
}

em(){
    $ed $0
}

###############################################################################
# write your code above
###############################################################################
function _help(){
    cd "${this}"
    cat<<EOF2
Usage: $(basename $0) ${bold}CMD${reset}

${bold}CMD${reset}:
EOF2
    # perl -lne 'print "\t$1" if /^\s*(\w+)\(\)\{$/' $(basename ${BASH_SOURCE})
    # perl -lne 'print "\t$2" if /^\s*(function)?\s*(\w+)\(\)\{$/' $(basename ${BASH_SOURCE}) | grep -v '^\t_'
    perl -lne 'print "\t$2" if /^\s*(function)?\s*(\w+)\(\)\{$/' $(basename ${BASH_SOURCE}) | perl -lne "print if /^\t[^_]/"
}

case "$1" in
     ""|-h|--help|help)
        _help
        ;;
    *)
        "$@"
esac
